{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "53912db3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a458ce84",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3. How to print the checkerboard pattern of nxn using NumPy?\n",
    "\n",
    "The problem statement is given n, print the checkerboard pattern for a nxn matrix considering 0 for black and 1 for white."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c037bb64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the size of the checkerboard: 6\n",
      "[[0 1 0 1 0 1]\n",
      " [1 0 1 0 1 0]\n",
      " [0 1 0 1 0 1]\n",
      " [1 0 1 0 1 0]\n",
      " [0 1 0 1 0 1]\n",
      " [1 0 1 0 1 0]]\n"
     ]
    }
   ],
   "source": [
    "n = int(input(\"Enter the size of the checkerboard: \"))\n",
    "\n",
    "checkerboard = np.zeros((n,n),dtype=int) \n",
    "\n",
    "checkerboard[1::2,::2] = 1 \n",
    "checkerboard[::2,1::2] = 1 \n",
    "\n",
    "print(checkerboard)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "defd457d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4. How to find the mean of every NumPy array in the given list?\n",
    "\n",
    "The problem statement is given a list of NumPy arrays, the task is to find the mean of every NumPy array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f17345c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3.0, 8.0]\n"
     ]
    }
   ],
   "source": [
    "x = np.array([1,2,3,4,5]) \n",
    "y = np.array([6,7,8,9,10])\n",
    "list_of_arrays = [x, y] \n",
    "means=[np.mean(arr) for arr in list_of_arrays] \n",
    "print(means)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "556c58a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q7. You are given a NxM integer array matrix with space separated elements ( N= rows and  M= columns).\n",
    "\n",
    "Your task is to print the transpose and flatten results.\n",
    "\n",
    "Input Format\n",
    "\n",
    "The first line contains the space separated values of N and M.\n",
    "\n",
    "The next N lines contain the space separated elements of M columns.\n",
    "\n",
    "Output Format\n",
    "\n",
    "First, print the transpose array and then print the flatten.\n",
    "\n",
    "Example: \n",
    "\n",
    "Input : \n",
    "\n",
    "2 2\n",
    "\n",
    "1 2\n",
    "\n",
    "3 4\n",
    "\n",
    "Output: \n",
    "\n",
    "[[1 3]\n",
    "\n",
    " [2 4]]\n",
    "\n",
    "[1 2 3 4]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3b5772a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 3]\n",
      " [2 4]]\n",
      "[1 2 3 4]\n"
     ]
    }
   ],
   "source": [
    "a=np.array(([1,2],[3,4]))\n",
    "print(np.transpose(a))\n",
    "print(a.flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd3eb377",
   "metadata": {},
   "outputs": [],
   "source": [
    "#8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d81eaec7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 2. 3. 4. 5. 6. 7. 8. 9.]\n",
      "[ 2.  3.  4.  5.  6.  7.  8.  9. 10.]\n",
      "[ 1.  2.  3.  4.  6.  7.  8.  9. 10.]\n"
     ]
    }
   ],
   "source": [
    "b=np.array([1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9])\n",
    "\n",
    "# Floor value\n",
    "print(np.floor(b))\n",
    "\n",
    "# Ceil value\n",
    "print(np.ceil(b))\n",
    "\n",
    "# rint value\n",
    "print(np.rint(b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d348d042",
   "metadata": {},
   "outputs": [],
   "source": [
    "#10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ad233009",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.5 3.5]\n",
      "[1. 1.]\n",
      "1.118033988749895\n"
     ]
    }
   ],
   "source": [
    "c=np.array(([1,2],[3,4]))\n",
    "\n",
    "# Mean along axis=1\n",
    "print(np.mean(c,axis=1))\n",
    "\n",
    "# Var along axis=0\n",
    "print(np.var(c,axis=0))\n",
    "\n",
    "# Std along axis none\n",
    "print(np.std(c,axis=None))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "482208d2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
